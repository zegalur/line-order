# This script demonstrates the use of a local fisheye projection
# that zooms in on clusters of small triangles, making them more visible
# while preserving the overall structure of the image.
import lineorder


# 27-lines arrangement by P.Savchuk.
# Used here as a placeholder/example for demonstration.
kobon_27_2 = lineorder.reindex_table([ 
  [27,15,25,21,26,19,23,13,20,9,17,14,22,11,16,3,12,7,18,8,10,5,24,4,6,2], 
  [3,15,9,27,7,19,13,21,14,25,11,17,8,20,16,26,12,23,5,18,10,22,4,24,6,1], 
  [2,15,27,9,21,19,25,13,26,14,20,17,23,11,22,16,1,12,18,7,10,8,24,5,6,4], 
  [5,9,7,15,8,13,11,19,14,27,17,21,16,25,12,20,10,23,18,26,22,2,24,1,6,3], 
  [4,9,15,7,27,13,19,8,14,11,21,17,25,16,20,12,26,23,2,18,22,10,1,24,3,6], 
  [7,9,8,15,11,13,10,14,12,17,16,19,18,21,20,27,23,25,22,26,24,2,1,4,3,5], 
  [6,9,4,15,5,27,2,19,21,13,25,14,26,17,20,11,23,16,22,12,1,18,3,10,24,8], 
  [9,6,15,4,13,27,19,5,14,21,11,25,17,2,20,26,16,23,12,22,18,1,10,3,24,7], 
  [8,6,7,4,5,15,2,27,3,21,25,19,26,13,23,20,1,17,22,14,16,11,18,12,24,10], 
  [11,15,13,6,14,19,17,27,16,21,12,25,20,4,23,26,18,2,22,5,1,8,3,7,24,9], 
  [10,15,6,13,4,19,27,14,5,21,8,25,2,17,26,20,7,23,3,22,1,16,9,18,24,12], 
  [13,15,14,6,17,19,16,27,21,10,25,4,20,5,26,2,23,8,22,7,1,3,18,9,24,11], 
  [12,15,10,6,11,4,8,27,5,19,2,21,7,25,3,26,9,23,1,20,22,17,24,16,18,14], 
  [15,12,6,10,19,4,27,11,5,8,21,2,25,7,26,3,20,23,17,1,22,9,16,24,18,13], 
  [14,12,13,10,11,6,8,4,7,5,9,2,3,27,1,25,26,21,23,19,22,20,24,17,18,16], 
  [17,6,19,12,27,10,21,4,25,5,20,2,26,8,23,7,22,3,1,11,9,14,24,13,18,15], 
  [16,6,12,19,10,27,4,21,5,25,8,2,11,26,7,20,3,23,14,1,9,22,13,24,15,18],
  [19,6,21,27,20,25,23,4,26,10,2,5,22,8,1,7,3,12,9,11,24,14,13,16,15,17], 
  [18,6,16,12,17,10,14,4,11,27,8,5,13,2,7,21,3,25,9,26,1,23,15,22,24,20], 
  [21,6,27,18,25,10,4,12,5,16,2,8,26,11,7,17,3,14,23,9,1,13,22,15,24,19], 
  [20,6,18,27,12,10,16,4,17,5,11,8,14,2,13,7,19,3,9,25,1,26,15,23,24,22], 
  [23,27,25,6,26,4,2,10,5,18,8,12,7,16,3,11,1,14,9,17,13,20,15,19,24,21], 
  [22,27,6,25,18,4,10,26,5,2,12,8,16,7,11,3,17,14,20,9,13,1,19,15,21,24], 
  [25,27,26,6,2,4,1,5,3,8,7,10,9,12,11,18,14,16,13,17,15,20,19,22,21,23], 
  [24,27,22,6,23,18,20,10,12,4,16,5,17,8,11,2,14,7,13,3,19,9,21,1,15,26], 
  [27,24,6,22,4,18,10,23,5,12,2,16,8,20,11,17,7,14,3,13,9,19,1,21,15,25], 
  [26,24,25,22,23,6,20,18,21,12,16,10,17,4,14,11,19,8,13,5,7,2,9,3,15,1], 
 ], 6)

# Assign your table here:
table = kobon_27_2

# Set your parameters here:
# (make sure you also setup the proper clusterization parameters down below)

CL_IMG_DIR = "gallery/imgs/clusters.svg"
RES_IMG_DIR = "gallery/imgs/local_fisheyes.svg"
GALLERY_HTML_DIR = "gallery/local.html"

find_line_args = {
    'rotational_symmetry' : 3,
    'main_coefficient' : 0.5,
    'ineq_epsilon' : 0.03,
}

draw_lines_args = {
    'fisheye' : True,
    'factor'  : 0.45,
    'local_factor'  : 0.55,
    #'title_text' : "<Image title text here>",
    'scale_x' : 1.1,
    'scale_y' : 1.1,
    #'delta_l' : 4.5,
    'tri_seg_count' : 50,
}

########


print("1. Straightening the arrangement...")
straightened_arrangement = lineorder.find_lines(table, **find_line_args)
if straightened_arrangement['status'] != 'OK':
    print(straightened_arrangement['status'])
    exit(1)
print("...DONE")


print("2. Clusterize...")
result_lines = straightened_arrangement['lines']
svg1 = lineorder.draw_lines(
        result_lines,
        incircles = True,
        draw_incircles = True,
        clusterize = True,

        # Clusterization parameters:

        min_radius = -3.5,
        cluster_radius = -40.0,
        cluster_final_radius = -70.0,

        ######

        **draw_lines_args)
if svg1['status'] != 'OK':
    print(result_svg['status'])
    exit(1)
with open(CL_IMG_DIR, 'w') as file:
    file.write(svg1['svg'])
local_fisheyes = svg1['clusters']
print('...DONE (saved in `{}`)'.format(CL_IMG_DIR))


print('3. Making the final image...')
result_svg = lineorder.draw_lines(
        result_lines,
        local_fisheyes = local_fisheyes,
        **draw_lines_args
        )
if result_svg['status'] != 'OK':
    print(result_svg['status'])
    exit(1)
lines_arrangment_svg = result_svg['svg']
with open(RES_IMG_DIR, 'w') as file:
    file.write(lines_arrangment_svg)
print('...DONE (saved in `{}`)'.format(RES_IMG_DIR))


print("4. Generating gallery HTML...")
with open(GALLERY_HTML_DIR, 'w') as file:
    file.write(lineorder.gallery_html_header.format(
        title = "Local Fisheye Projection Gallery",
        header = "Local Fisheye Projection Gallery",
        ))
    file.write("<p>\n")
    file.write("This page demonstrates the effect of applying local fisheye ")
    file.write("projections to enhance the readability of small triangles. ")
    file.write("\n<br>\nThis page was automatically generated by `generate_gallery_3.py`.\n")
    file.write("</p>\n")

    file.write("<table>\n")
    file.write("<tr>\n")
    file.write("<p>Red circles indicate the clusters where the local fisheye ")
    file.write("projection is applied:</p>\n")
    file.write("<td><img src='{}' />\n".format(
        CL_IMG_DIR.replace("gallery/","")))
    file.write("</td>\n")
    file.write("<td><img src='{}' /></td>\n".format(
        RES_IMG_DIR.replace("gallery/","")))
    file.write("</tr>\n")
    file.write("</table>\n")

    file.write("</body>\n</html>")
print('...DONE (saved in `{}`)'.format(GALLERY_HTML_DIR))
